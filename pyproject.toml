[project]
name = "bilibili-py"
description = "Bilibili API for Python"
readme = "README.md"
license = { text = "GPL-3.0-only" }
authors = [{ name = "cntvc", email = "cntvc@outlook.com" }]
keywords = ["bilibili", "bilibili-api", "bilibili-py"]
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Natural Language :: Chinese (Simplified)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = ["version"]
requires-python = ">=3.11"
dependencies = []

[project.urls]
repository = "https://github.com/bilibili-project/bilibili-py"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


# PDM ================================================================================

[tool.pdm]
distribution = true

[tool.pdm.build]
includes = ["bilibili"]
excludes = ["tests"]

[tool.pdm.version]
source = "scm"
write_to = "bilibili/version.py"
write_template = 'version = "{}"'

[tool.pdm.dev-dependencies]
lint = ["ruff>=0.9.9", "pre-commit>=4.1.0"]
test = ["pytest>=8.3.5", "pytest-cov>=6.0.0"]

[tool.pdm.scripts]
pre_install = { composite = [
    "git update-index --skip-worktree ./bilibili/version.py",
    "pre-commit install",
] }

lint = "pre-commit run --all-files"
test = "pytest"
cov = { shell = "python -m pytest --verbosity=3 --cov=bilibili tests/" }


# Ruff ================================================================================

[tool.ruff]
line-length = 100
fix = true
src = ["bilibili", "tests"]

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "C90", # mccabe
    "RUF", # ruff
]
extend-ignore = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # unused import
    "F403", # cannot detect unused vars if we use starred import
    "F405", # may be undefined, or defined from star imports
    "E402", # module level import not at top of file
]

[tool.ruff.lint.isort]
known-first-party = ["bilibili"]

[tool.ruff.lint.mccabe]
max-complexity = 10


# pytest ================================================================================

[tool.pytest.ini_options]
addopts = "-r aR"
testpaths = ["tests/"]


# coverage ================================================================================

[tool.coverage.run]
source = ["bilibili/"]
omit = ["bilibili/__main__.py"]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
show_missing = true
# Donâ€™t report files that are 100% covered
skip_covered = true
